{"version":3,"sources":["webpack:///./plugins/gine-theme-mod/src/components/postCategories/CatChart.js","webpack:///./plugins/gine-theme-mod/src/pages/categories.js"],"names":["CatChart","componentDidMount","array","hash","result","srcAllDat","this","props","sourceData","all_data","all_cats","hier_cates","hier_cats","_totalcount","count","getHash2Attr","attr","forEach","obj","item","hash2color","hash2count","Basic_Data","ele","length","push","trim","cate1_name","cate2_name","sort","A","B","CAT1_Data","cate_name","CAT1_DataView","DataSet","createView","source","transform","type","field","dimension","as","CAT1_COLORS","rows","chart","Chart","container","autoFit","height","data","legend","coordinate","radius","innerRadius","scale","formatter","val","toFixed","tooltip","showMarkers","showTitle","interval","adjust","position","color","name","style","stroke","lineWidth","label","offset","fill","shadowBlur","shadowColor","content","CAT2_Data","secLevel","par_name","CAT2_DataView","insideView","innerMostView","theme","defaultColor","annotation","text","fontSize","fontWeight","textAlign","interaction","render","on","ev","id","React","Component","Categories","classes","edges","allPosts","allCats","hierarchicalCats","_totoalcount","node","concat","categories","countCats","countBy","Object","entries","map","category","getHashLessColor","percent","title","className","index","query","withRoot","withStyles","margin","maxWidth","paddingTop"],"mappings":"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","file":"component---plugins-gine-theme-mod-src-pages-categories-js-4a0e2a5854652f6720e9.js","sourcesContent":["import React from 'react';\nimport { push } from 'gatsby'\nimport DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2'\n\nexport default class CatChart extends React.Component {\n    componentDidMount() {\n        const srcAllDat = this.props.sourceData\n        const all_data = srcAllDat.all_cats\n        const hier_cates = srcAllDat.hier_cats\n        const _totalcount=srcAllDat.count\n        let getHash2Attr = (array, attr) => {\n            let hash = {};\n            array.forEach(obj => {\n                hash[obj.item] = obj[attr];\n            });\n            return hash;\n        };\n\n        let deDuplicatingArray = array => {\n            let hash = {};\n            let result = [];\n            array.forEach(ele => {\n                if (ele.length < 2) ele.push(\"\");\n                if (!!hash[ele[0].trim() + ele[1].trim()]) return true;\n                else {\n                    hash[ele[0].trim() + ele[1].trim()] = 1;\n                    result.push([ele[0], ele[1]]);\n                }\n            });\n            return result;\n        };\n\n        var hash2color = getHash2Attr(all_data, \"color\");\n        var hash2count = getHash2Attr(all_data, \"count\");\n\n        var Basic_Data = [];\n        deDuplicatingArray(hier_cates).forEach(ele => {\n            Basic_Data.push({\n                cate1_name: ele[0],\n                cate2_name: !!ele[1] ? ele[1] : \"\",\n                count: !!ele[1] ? hash2count[ele[1]] : hash2count[ele[0]]\n            });\n        });\n        Basic_Data = Basic_Data.sort((A, B) => {\n            return A.cate1_name > B.cate1_name ? 1 : -1;\n        });\n        // 通过 DataSet 计算百分比\n        var CAT1_Data = [];\n        Basic_Data.forEach(ele => {\n            CAT1_Data.push({ cate_name: ele.cate1_name, count: ele.count });\n        });\n        const CAT1_DataSet = new DataSet();\n        const CAT1_DataView = CAT1_DataSet.createView();\n        CAT1_DataView.source(CAT1_Data).transform({\n            type: \"percent\",\n            field: \"count\",\n            dimension: \"cate_name\",\n            as: \"percent\"\n        });\n        var CAT1_COLORS = [];\n        CAT1_DataView.rows.forEach(ele => {\n            CAT1_COLORS.push(hash2color[ele.cate_name]);\n        });\n\n        const chart = new Chart({\n            container: \"catpie_container\",\n            autoFit: true,\n            height: 500\n        });\n        chart.data(CAT1_DataView.rows);\n        chart.legend(false);\n        chart.coordinate(\"theta\", {\n            radius: 0.6,\n            innerRadius: 0.3\n        });\n        chart.scale(\"percent\", {\n            formatter: val => {\n                val = (val * 100).toFixed(0) + \"%\";\n                return val;\n            }\n        });\n        chart.tooltip({\n            showMarkers: false,\n            showTitle: false\n        });\n        chart\n            .interval()\n            .adjust(\"stack\")\n            .position(\"percent\")\n            .color(\"cate_name\", name => hash2color[name])\n            .style({\n                stroke: \"white\",\n                lineWidth: 1\n            })\n            .label(\"cate_name\", () => {\n                return {\n                    offset: -10,\n                    style: {\n                        fill: \"white\",\n                        shadowBlur: 2,\n                        shadowColor: \"rgba(0, 0, 0, .45)\"\n                    },\n                    content: obj => {\n                        let cate_name = obj.cate_name;\n                        if (!!cate_name) return cate_name + \"(\" + hash2count[cate_name] + \")\";\n                        else return \"\";\n                    }\n                };\n            });\n\n        var CAT2_Data = [];\n        Basic_Data.forEach(ele => {\n            CAT2_Data.push({\n                cate_name: !!ele.cate2_name ? ele.cate2_name : ele.cate1_name,\n                count: ele.count,\n                secLevel: !!ele.cate2_name ? true : false,\n                par_name:ele.cate1_name\n            });\n        });\n        const CAT2_DataSet = new DataSet();\n        const CAT2_DataView = CAT2_DataSet.createView();\n        CAT2_DataView.source(CAT2_Data).transform({\n            type: \"percent\",\n            field: \"count\",\n            dimension: \"cate_name\",\n            as: \"percent\"\n        });\n\n        const insideView = chart.createView();\n        insideView.data(CAT2_DataView.rows);\n        insideView.coordinate(\"theta\", {\n            innerRadius: 0.6 / 1,\n            radius: 1\n        });\n        insideView\n            .interval()\n            .adjust(\"stack\")\n            .position(\"percent\")\n            .color(\"par_name\", par_name => hash2color[par_name])\n            .style({\n                stroke: \"white\",\n                lineWidth: 1\n            })\n            .label(\"cate_name\", () => {\n                return {\n                    offset: -12,\n                    style: {\n                        fill: \"white\",\n                        shadowBlur: 2,\n                        shadowColor: \"rgba(0, 0, 0, .45)\"\n                    },\n                    content: obj => {\n                        if (!obj.secLevel) return \"\";\n                        let cate_name = obj.cate_name;\n                        if (!!cate_name) return cate_name + \"(\" + hash2count[cate_name] + \")\";\n                        else return \"\";\n                    }\n                };\n            });\n\n        const innerMostView = chart.createView();\n        innerMostView.theme({ defaultColor: \"red\" });\n        innerMostView.annotation().text({\n            position: [\"50%\", \"50%\"],\n            content: \"共\" + _totalcount + \"篇\",\n            style: {\n                fontSize: 18,\n                fill: \"#000\",\n                fontWeight: 500,\n                textAlign: \"center\"\n            }\n        });\n\n        chart.interaction(\"element-active\");\n\n        chart.render();\n        chart.on('interval:click', ev => { push(`/categories/${ev.data.data.cate_name}`) });\n    }\n    render() {\n        return (\n            <div id=\"catpie_container\"></div>\n        );\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport withRoot from '../withRoot'\nimport Layout from '../components/layout/index'\nimport countBy from 'lodash/countBy'\nimport { getHashColor,getHashLessColor } from '../components/utils/hash-colorful-tag'\nimport { graphql } from 'gatsby'\nimport Paper from '../components/utils/paper'\nimport CatChart from '../components/postCategories/CatChart'\n\nconst styles = theme => ({\n    index: {\n        margin: '0 auto',\n        maxWidth: 800,\n        paddingTop: '1em',\n        textAlign: 'center',\n    },\n})\n\nclass Categories extends React.Component {\n    render() {\n        const { classes, data: { allPosts: { edges } } } = this.props\n        let allCats = []\n        let hierarchicalCats = []\n        let _totoalcount=0;\n        edges.forEach(\n            ({ node }) => {\n                allCats = allCats.concat(node.categories)\n                hierarchicalCats.push(node.categories)\n                _totoalcount+=1;\n            }\n        )\n        const countCats = countBy(allCats)\n        const sourceData = Object.entries(countCats).map(([category, count]) => {\n            return { item: category, count: count, color: getHashLessColor(category), percent: count / Object.entries(countCats).length }\n        })\n        const srcAllDat={all_cats:sourceData,hier_cats:hierarchicalCats,count:_totoalcount}\n        return (\n            <Layout title=\"分类\">\n                <div className={classes.index}>\n                    <Paper>\n                        <CatChart sourceData={srcAllDat} />\n                        {/* {Object.entries(countTags).map(([tag, count]) => {\n                            return <div style={{ display: 'flex' }} key={tag}>\n                                <ColorfulTag tag={tag} />{count}\n                            </div>\n                        })} */}\n                    </Paper>\n                </div>\n            </Layout>\n        )\n    }\n}\n\nCategories.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withRoot(withStyles(styles)(Categories))\n\nexport const query = graphql`\n  {\n    allPosts(filter:{status: {eq: \"published\"}}){\n    edges {\n      node {\n        categories\n      }\n    }\n  }\n}\n`\n"],"sourceRoot":""}