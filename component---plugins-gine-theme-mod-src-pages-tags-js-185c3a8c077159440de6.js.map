{"version":3,"sources":["webpack:///./plugins/gine-theme-mod/src/components/postTag/TagChart.js","webpack:///./plugins/gine-theme-mod/src/pages/tags.js"],"names":["TagChart","componentDidMount","srcAllDat","this","props","sourceData","data","all_tags","_totalcount","count","chart","Chart","container","autoFit","height","scale","formatter","val","toFixed","coordinate","radius","innerRadius","tooltip","showTitle","showMarkers","itemTpl","annotation","text","position","content","style","fontSize","fill","fontWeight","textAlign","interval","adjust","color","lineWidth","stroke","label","item","percent","name","value","interaction","render","on","ev","push","id","React","Component","Tags","classes","edges","allPosts","allTags","_totoalcount","forEach","node","concat","tags","countTags","countBy","Object","entries","map","tag","getHashColor","length","title","className","index","query","withRoot","withStyles","theme","margin","maxWidth","paddingTop"],"mappings":"uRAKqBA,E,0GACjBC,kBAAA,WAEI,IAAMC,EAAYC,KAAKC,MAAMC,WACvBC,EAAOJ,EAAUK,SACjBC,EAAcN,EAAUO,MACxBC,EAAQ,IAAIC,IAAM,CACpBC,UAAW,mBACXC,SAAS,EACTC,OAAQ,MAEZJ,EAAMJ,KAAKA,GACXI,EAAMK,MAAM,UAAW,CACnBC,UAAW,SAAAC,GAEP,OADAA,GAAa,IAANA,GAAWC,QAAQ,GAAK,OAIvCR,EAAMS,WAAW,QAAS,CACtBC,OAAQ,IACRC,YAAa,IAEjBX,EAAMY,QAAQ,CACVC,WAAW,EACXC,aAAa,EACbC,QACI,mIAGRf,EAAMgB,aAAaC,KAAK,CACpBC,SAAU,CAAC,MAAO,OAClBC,QAAS,IAAMrB,EAAc,IAC7BsB,MAAO,CACHC,SAAU,GACVC,KAAM,OACNC,WAAY,IACZC,UAAW,YAGnBxB,EACKyB,WACAC,OAAO,SACPR,SAAS,WACTS,MAAM,QACNP,MAAM,CACHQ,UAAW,EACXC,OAAQ,SAEXC,MAAM,SAAS,SAAA/B,GACZ,MAAO,CACHoB,QAAS,SAAAvB,GACL,OAAUA,EAAKmC,KAAf,KAAwBhC,OAInCa,QAAQ,gBAAgB,SAACmB,EAAMC,GAE5B,MAAO,CACHC,KAAMF,EACNG,MAHJF,EAA+B,IAArBA,EAAQxB,QAAQ,GAAW,QAO7CR,EAAMmC,YAAY,kBAClBnC,EAAMoC,SACNpC,EAAMqC,GAAG,kBAAkB,SAAAC,GAAQC,YAAK,SAASD,EAAG1C,KAAKA,KAAKmC,U,EAGlEK,OAAA,WACI,OACI,yBAAKI,GAAG,sB,GAtEkBC,IAAMC,WCetCC,E,kGACFP,OAAA,WAAU,IAAD,EAC8C3C,KAAKC,MAAhDkD,EADH,EACGA,QAA6BC,EADhC,EACYjD,KAAQkD,SAAYD,MACjCE,EAAU,GACVC,EAAa,EACjBH,EAAMI,SACF,YAAc,IAAXC,EAAU,EAAVA,KACEH,EAAUA,EAAQI,OAAOD,EAAKE,MAC9BJ,GAAc,KAEvB,IAAMK,EAAYC,IAAQP,GAIpBvD,EAAW,CAACK,SAHC0D,OAAOC,QAAQH,GAAWI,KAAI,YAAmB,IAAjBC,EAAgB,KAAX3D,EAAW,KAC/D,MAAO,CAAEgC,KAAM2B,EAAK3D,MAAOA,EAAO4B,MAAOgC,YAAaD,GAAM1B,QAASjC,EAAQwD,OAAOC,QAAQH,GAAWO,WAErE7D,MAAMiD,GAC5C,OACI,kBAAC,IAAD,CAAQa,MAAM,MACV,yBAAKC,UAAWlB,EAAQmB,OACpB,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAUpE,WAAYH,Q,GAnB3BiD,IAAMC,WAsCZsB,GAFEC,sBAASC,aA7CT,SAAAC,GAAK,MAAK,CACrBJ,MAAO,CACHK,OAAQ,SACRC,SAAU,IACVC,WAAY,MACZ9C,UAAW,aAwCK0C,CAAmBvB,IAEzB","file":"component---plugins-gine-theme-mod-src-pages-tags-js-185c3a8c077159440de6.js","sourcesContent":["import React from 'react';\nimport { push } from 'gatsby'\nimport { Chart } from '@antv/g2'\n\n\nexport default class TagChart extends React.Component {\n    componentDidMount() {\n        // const data = this.props.sourceData || []\n        const srcAllDat = this.props.sourceData\n        const data = srcAllDat.all_tags\n        const _totalcount = srcAllDat.count\n        const chart = new Chart({\n            container: \"tagpie_container\",\n            autoFit: true,\n            height: 600,\n        });\n        chart.data(data);\n        chart.scale(\"percent\", {\n            formatter: val => {\n                val = (val * 100).toFixed(0) + \"%\";\n                return val;\n            }\n        });\n        chart.coordinate(\"theta\", {\n            radius: 0.75,\n            innerRadius: 0.\n        });\n        chart.tooltip({\n            showTitle: false,\n            showMarkers: false,\n            itemTpl:\n                '<li class=\"g2-tooltip-list-item\"><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n        });\n        // 辅助文本\n        chart.annotation().text({\n            position: [\"50%\", \"50%\"],\n            content: \"共\" + _totalcount + \"篇\",\n            style: {\n                fontSize: 18,\n                fill: \"#000\",\n                fontWeight: 500,\n                textAlign: \"center\"\n            }\n        });\n        chart\n            .interval()\n            .adjust(\"stack\")\n            .position(\"percent\")\n            .color(\"item\")\n            .style({\n                lineWidth: 1,\n                stroke: '#fff'\n            })\n            .label(\"count\", count => {\n                return {\n                    content: data => {\n                        return `${data.item}: ${count}`;\n                    }\n                };\n            })\n            .tooltip(\"item*percent\", (item, percent) => {\n                percent = percent.toFixed(2) * 100 + \"%\";\n                return {\n                    name: item,\n                    value: percent\n                };\n            });\n\n        chart.interaction(\"element-active\");\n        chart.render();\n        chart.on('interval:click', ev => { push(`/tags/${ev.data.data.item}`) });\n        // interval.setSelected(data[0]);\n    }\n    render() {\n        return (\n            <div id=\"tagpie_container\"></div>\n        );\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport withRoot from '../withRoot'\nimport Layout from '../components/layout/index'\nimport countBy from 'lodash/countBy'\nimport  { getHashColor } from '../components/utils/hash-colorful-tag'\nimport { graphql } from 'gatsby'\nimport Paper from '../components/utils/paper'\nimport TagChart from '../components/postTag/TagChart'\n\nconst styles = theme => ({\n    index: {\n        margin: '0 auto',\n        maxWidth: 800,\n        paddingTop: '1em',\n        textAlign: 'center',\n    },\n})\n\nclass Tags extends React.Component {\n    render() {\n        const { classes, data: { allPosts: { edges } } } = this.props\n        let allTags = []\n        let _totoalcount=0;\n        edges.forEach(\n            ({ node }) =>{\n                 allTags = allTags.concat(node.tags)\n                 _totoalcount+=1;\n                })\n        const countTags = countBy(allTags)\n        const sourceData = Object.entries(countTags).map(([tag, count]) => {\n            return { item: tag, count: count, color: getHashColor(tag), percent: count / Object.entries(countTags).length }\n        })\n        const srcAllDat=({all_tags:sourceData,count:_totoalcount})\n        return (\n            <Layout title=\"标签\">\n                <div className={classes.index}>\n                    <Paper>\n                        <TagChart sourceData={srcAllDat} />\n                        {/* {Object.entries(countTags).map(([tag, count]) => {\n                            return <div style={{ display: 'flex' }} key={tag}>\n                                <ColorfulTag tag={tag} />{count}\n                            </div>\n                        })} */}\n                    </Paper>\n                </div>\n            </Layout>\n        )\n    }\n}\n\nTags.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withRoot(withStyles(styles)(Tags))\n\nexport const query = graphql`\n  {\n    allPosts(filter:{status: {eq: \"published\"}}){\n    edges {\n      node {\n        tags\n      }\n    }\n  }\n}\n`\n"],"sourceRoot":""}