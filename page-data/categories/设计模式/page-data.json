{"componentChunkName":"component---plugins-gine-theme-mod-src-components-post-categories-category-page-js","path":"/categories/设计模式","result":{"data":{"allPosts":{"edges":[{"node":{"description":null,"html":"fetch error","id":"1dee4ba9-68b4-5912-95c7-78781075cf23","name":"Composite模式实现及与Iterator模式结合","tags":["DesignPattern","Java"],"categories":["编程语言","设计模式"],"public_date":"2020-05-18","slug":"c2c83866f30d426fb8066eaf3d2fd13c"}},{"node":{"description":null,"html":"fetch error","id":"cb5761cf-37c7-59ea-a53f-07cde530d904","name":"Composite模式概念","tags":["DesignPattern","Java"],"categories":["编程语言","设计模式"],"public_date":"2020-05-17","slug":"558e0b131d69454788d5042384d52a48"}},{"node":{"description":"提供一种对集合中的元素进行有序遍历的方式，而不关心不暴露集合的底层结构...","html":"fetch error","id":"2c941b83-ae79-538d-9d3b-cc3054740eb4","name":"Iterator模式","tags":["DesignPattern","Java"],"categories":["编程语言","设计模式"],"public_date":"2020-05-16","slug":"437cc038ebdc46e691fd735538d3fed1"}}],"totalCount":3}},"pageContext":{"category":"设计模式"}},"staticQueryHashes":["51046549"]}